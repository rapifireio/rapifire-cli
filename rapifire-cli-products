#!/usr/bin/env node
// -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools.js');
var config = require('./config');

var base = config.baseApiUrl + "/products/";

program
  .command("list")
  .description("List all products")
  .action(function(opts) {
    console.log("Products:");

    rest.get(base, tools.getAuthObj())
      .on('success', function(data , response) {
      	tools.printJsonArray(data);
      }).on('fail', tools.failureHandler);
  });	

program
  .command("create <name> [heartbeat]")
  .description("Create new product")
  .action(function(name, heartbeat, opts) {
    // default value for heartbeat is 60 sec
    var heartbeat = heartbeat ? heartbeat : 60;

    rest.postJson(base, {name: name, heartbeat: heartbeat}, tools.getAuthObj())
      .on('success', function(data, response) {
    	console.log("New product created: " + JSON.stringify(data));
      }).on('fail', tools.failureHandler);
  });

program
  .command("update <productName> <heartbeat>")
  .description("Update heartbeat for product")
  .action(function(productName, heartbeat, opts){
    doForProductName(productName, function(productId){
      rest.putJson(base + productId, {"heartbeat" : heartbeat}, tools.getAuthObj())
        .on('success', function(data, response){
          console.log("Product " + productName + " updated successfully.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("delete <productName>")
  .description("Delete single product")
  .action(function(productName, opts){
    doForProductName(productName, function(productId){
      rest.del(base + productId, tools.getAuthObj())
        .on('success', function(data, response){
          console.log("Product " + productName + " deleted successfully.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("meta <productName>")
  .description("List all metadata for given product")
  .action(function(productName, opts) {

    doForProductName(productName, function(productId){
      rest.get(base + productId + '/meta', tools.getAuthObj())
        .on('success', function(data , response) {
          tools.printJsonArray(data);
        }).on('fail', tools.failureHandler);
    });

});	

program
  .command("meta-add <productName> <key> <value>")
  .description("Create or update product metadata entry")
  .action(function(productName, key, value){
    var metadataJson = {
        "key"   : key,
        "value" : value
      };

    doForProductName(productName, function(productId){
      rest.putJson(base + productId + '/meta', metadataJson, tools.getAuthObj())
        .on('success', function(data, response){
          console.log("Metadata added successfully.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("meta-delete <productName> <key>")
  .description("Delete single product's metadata entry")
  .action(function(productName, key, opts){

    doForProductName(productName, function(productId){
      rest.del(base + productId + '/meta/' + key, tools.getAuthObj())
          .on('success', function(data, response){
            console.log('Key ' + key + ' deleted successfully for product ' + productName + '.');
          }).on('fail', tools.failureHandler);
    });
  });


function doForProductName(productName, callback) {

  rest.get(base + "?name=" + productName, tools.getAuthObj())
      .on('success', function(data, response) {
        if(data.length != 1){
          process.exit(1);
        }
        var productId = data[0].id;
        callback(productId);
      }).on('fail', tools.failureHandler);
}


program.parse(process.argv);
if (!program.args.length) {
  program.help();
}
