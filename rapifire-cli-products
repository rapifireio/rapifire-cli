#!/usr/bin/env node
 // -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools');
var DEFAULT_HEARTBEAT = 300;

program
  .command("list")
  .description("List all products")
  .action(function(opts) {
    rest.get(tools.urlProducts(), tools.getAuthObj())
      .on('success', function(data, response) {
        if (data.length > 0) {
          console.log("Products:");
          tools.printJsonArray(data);
        } else {
          console.log("No products.");
        }
      }).on('fail', tools.failureHandler);
  });

program
  .command("create <name> [heartbeat]")
  .description("Create new product")
  .action(function(name, heartbeat, opts) {
    var heartbeat = heartbeat ? heartbeat : DEFAULT_HEARTBEAT;

    rest.postJson(tools.urlProducts(), {
        name: name,
        heartbeat: heartbeat
      }, tools.getAuthObj())
      .on('success', function(data, response) {
        console.log("New product created:");
        tools.printJson(data);
      }).on('fail', tools.failureHandler);
  });

program
  .command("update <productName> <heartbeat>")
  .description("Update heartbeat for product")
  .action(function(productName, heartbeat, opts) {
    tools.doForProductName(productName, function(productId) {
      rest.putJson(tools.urlProduct(productId), {
          "heartbeat": heartbeat
        }, tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("Product " + productName + " updated.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("delete <productName>")
  .description("Delete single product")
  .action(function(productName, opts) {
    tools.doForProductName(productName, function(productId) {
      rest.del(tools.urlProduct(productId), tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("Product " + productName + " deleted.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("meta <productName>")
  .description("List all metadata for given product")
  .action(function(productName, opts) {

    tools.doForProductName(productName, function(productId) {
      rest.get(tools.urlProductMeta(productId), tools.getAuthObj())
        .on('success', function(data, response) {
          if (data.length > 0) {
            tools.printJsonArray(data);
          } else {
            console.log("No meta.");
          }
        }).on('fail', tools.failureHandler);
    });

  });

program
  .command("meta-add <productName> <key> <value>")
  .description("Create or update product metadata entry")
  .action(function(productName, key, value) {
    var metadataJson = {
      "key": key,
      "value": value
    };

    tools.doForProductName(productName, function(productId) {
      rest.putJson(tools.urlProductMeta(productId), metadataJson, tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("Metadata added.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("meta-delete <productName> <key>")
  .description("Delete single product's metadata entry")
  .action(function(productName, key, opts) {

    tools.doForProductName(productName, function(productId) {
      rest.del(tools.urlProductMetaKey(productId, key), tools.getAuthObj())
        .on('success', function(data, response) {
          console.log('Key ' + key + ' deleted for product ' + productName + '.');
        }).on('fail', tools.failureHandler);
    });
  });

program
  .command("commands-list <productName>")
  .description("List product commands")
  .action(function(productName){
    tools.doForProductName(productName, function(productId){
      rest.get(tools.urlProductCommands(productId), tools.getAuthObj())
        .on('success', function(data, response){
          if(data && data.length){
            tools.printJsonArray(data);
          } else {
            console.log("No commands for this product.");
          }
        }).on('fail', tools.failureHandler);
    });
  });

program
  .command("commands-add <productName> <commandName> <commandType> <commandVisibility> [commandPayload]")
  .description("Create new command for product")
  .action(function(productName, commandName, commandType, commandVisibility, commandPayload){

    if (!/^(text|binary)$/.test(commandType)) {
      console.log("Invalid 'commandType' argument. Should be 'text' or 'binary'.");
      process.exit(1);
    }

    if (!/^(all|developer_only)$/.test(commandVisibility)) {
      console.log("Invalid 'commandVisibility' argument. Should be 'all' or 'developer_only'.");
      process.exit(1);
    }

    tools.doForProductName(productName, function(productId){
      var commandJson = {
        name: commandName,
        type: commandType,
        visibility: commandVisibility,
        payload: commandPayload
      };
      rest.postJson(tools.urlProductCommands(productId), commandJson, tools.getAuthObj())
        .on('success', function(data, response){
          console.log("New command created.");
        }).on('fail', tools.failureHandler);
    });
  }).on('--help', function() {
    console.log('  Argument values information:');
    console.log();
    console.log('    productName: existing product name');
    console.log('    commandName: new command name');
    console.log('    commandType: \'text\' or \'binary\'');
    console.log('    commandVisibility: \'all\' or \'developer_only\'');
    console.log('    commandPayload: string (must be hex dump for binary type)');
    console.log();
  });

program.parse(process.argv);
if (!program.args.length) {
  program.help();
}
