#!/usr/bin/env node
 // -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools');

program
  .command("as <name> <data>")
  .description("Publish SenML formatted data as a Thing")
  .action(function(name, data, opts) {
    console.log("Publishing as a thing named " + name + ": " + data);
    doPublish(name, data, 'data');
  });

program
  .command("to <name> <data>")
  .description("Publish free form data (command) to a Thing")
  .action(function(name, data, opts) {
    console.log("Publishing to a thing named " + name + ": " + data);
    doPublish(name, data, 'commands');
  });

function doPublish(name, dataToPublish, channel) {
  rest.get(tools.urlThingByName(name), tools.getAuthObj())
    .on('complete', function(data, response) {
      var thing = null;
      for (var i = 0; i < data.length; i++) {
        if (data[i].name == name) {
          thing = data[i];
          break;
        }
      }
      if (thing == null) {
        console.log("Thing not found.");
        process.exit(1);
      }

      var toPublish = null;
      if (channel === 'commands') {
        toPublish = dataToPublish;
      } else {
        try {
          toPublish = JSON.parse(dataToPublish);
        } catch (e) {
          console.log("Invalid JSON SenML.");
          process.exit(1);
        }
      }

      var publish = function(authId, authKey) {
        rest.postJson(tools.urlChannels(thing.thingId, channel), toPublish, {
            username: authId,
            password: authKey
          })
          .on('success', function(data, response) {
            console.log("Data successfully published.");
          })
          .on('fail', tools.failureHandler);
      }

      if (channel === 'commands') {
        tools.doForMyself(publish);
      } else {
        publish(thing.thingId, thing.thingToken);
      }
    })
    .on('fail', tools.failureHandler);
}

program.parse(process.argv);
if (!program.args.length) {
  program.help();
}
