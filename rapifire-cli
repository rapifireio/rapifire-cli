#!/usr/bin/env node
// -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools.js');

program
    .command("signin <email> <password>")
    .description("Sign in to your existing RAPIFIRE Developer Account")
    .action(function(email, password, opts) {
        // POST /api/web/v1/myself username password
        console.log("Signing in", email);
        rest.get('http://rapifire.com/api/web/v1/myself', {username: email, password: password})
            .on('success', function(data, response) {
                tools.writeConfig({username: email, password: password});
                console.log("Signed in. Email and password is stored in " + tools.getProfileFilename() + ".");
            })
            .on('fail', tools.failureHandler);
    });

program
  .command("register <email> <password>")
  .description("Initialize RAPIFIRE Developer Account")
  .action(function(email, password, opts) {
    // POST /api/web/v1/developers username password
    console.log("Registering", email);
    rest.postJson('http://rapifire.com/api/web/v1/developers',
                  {username: email, password: password})
      .on('success', function(data, response) {
          tools.writeConfig({username: email, password: password, activated: false});
          console.log("Account created. Email and password is stored in " + tools.getProfileFilename() + ". Please check your email and activate your account.");
      }).on('fail', tools.failureHandler);
  });

program
  .command("activate <activationCode>")
  .description("Activate your RAPIFIRE Developer Account")
  .action(function(activationCode, opts) {
    console.log("Activating", activationCode);

    rest.get('http://rapifire.com/api/web/v1/developers?token=' + activationCode)
      .on('success', function(data , response) {
        var config = tools.readConfig();
        config.activated = true;
        tools.writeConfig(config);
        console.log("Account activated. Configuration updated.");
      }).on('fail', tools.failureHandler);
  });

program
  .command("products", "Products management commands")
  .command("things", "Things management commands")
  .command("users", "Users management commands")
  .command("code", "Cloud Code management")
  .command("console","Things real-time data console")
;

program.parse(process.argv);

if (!program.args.length) {
  program.help();
}
