#!/usr/bin/env node
// -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools');
var config = require('./config');

program
  .command("login <email> <password>")
  .description("Log into to your existing RAPIFIRE Developer Account")
  .action(function(email, password, opts) {
    // POST /api/web/v1/myself username password
    console.log("Logging in " + email + ".");
    rest.get(config.baseWebUrl + '/myself', {username: email, password: password})
      .on('success', function(data, response) {
        tools.writeConfig({username: email, password: password});
        console.log("Logged in.\nEmail and password is stored in " + tools.getProfileFilename() + ".");
      })
      .on('fail', tools.failureHandler);
  });

program
  .command("register <email> <password>")
  .description("Initialize RAPIFIRE Developer Account")
  .action(function(email, password, opts) {
    console.log("Registering", email);
    rest.postJson(config.baseWebUrl + '/developers',
                  {username: email, password: password})
      .on('success', function(data, response) {
        tools.writeConfig({username: email, password: password, activated: false});
        console.log("Account created.\nEmail and password is stored in " + tools.getProfileFilename() + ".\nPlease check your email and activate your account.");
      }).on('fail', tools.failureHandler);
  });

program
  .command("activate <activationCode>")
  .description("Activate your RAPIFIRE Developer Account")
  .action(function(activationCode, opts) {
    console.log("Activating", activationCode);

    rest.get(config.baseWebUrl + '/developers?token=' + activationCode)
      .on('success', function(data , response) {
        var config = tools.readConfig();
        config.activated = true;
        tools.writeConfig(config);
        console.log("Account activated. Configuration updated.");
      }).on('fail', tools.failureHandler);
  });

program
  .command("products", "Products management commands")
  .command("things", "Things management commands")
  .command("users", "Users management commands")
  .command("cloud-code", "Cloud Code management")
  .command("console","Things real-time data console")
  .command("publish", "Publish data to the cloud")
  .command("subscribe", "Subscribe to command channels")
;

program.parse(process.argv);

if (!program.args.length) {
  program.help();
}
