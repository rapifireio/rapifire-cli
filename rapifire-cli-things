#!/usr/bin/env node
// -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools');
var config = require('./config');

var base = config.baseApiUrl + "/things/";
var getProductByNameUrl = config.baseApiUrl + "/products/?name=";
var getUserByNameUrl = config.baseApiUrl + "/users/?username=";

program
  .command("create <name> <product>")
  .description("Create new thing")
  .action(function(name, product, opts) {
      console.log("Creating new thing named " + name + " for product " + product);

      doForProductName(product, function(productId){
          rest.postJson(base, {productId: productId, name:  name}, tools.getAuthObj())
              .on('success', function(data, response) {
                  console.log("New thing created: " + JSON.stringify(data));
              })
              .on('fail', tools.failureHandler);
        })
  });


program
  .command("update <name> <product> <newName> <newProductName> [userName]")
  .description("Update thing entry")
  .action(function(name, product, newName, newProductName, userName, opts){
    doForThingName(name, product, function(thingId, oldProductId){
      doForProductName(newProductName, function(productId){
        var updateJson = {
          name : newName,
          productId : productId
        }

        var updateThing = function(json){
          rest.putJson(base + thingId, json, tools.getAuthObj())
          .on('success', function(data, response){
            console.log("Thing updated.");
          })
          .on('fail', tools.failureHandler);
        }

        if(userName && userName.length > 0) {
          doForUserName(userName, function(userId){
            updateJson.userId = userId;
            updateThing(updateJson);
          });
        } else {
          updateThing(updateJson);
        }
      });
    });
  });


function doForProductName(productName, callback) {
  rest.get(getProductByNameUrl + productName, tools.getAuthObj())
      .on('success', function(data, response) {
        if(data.length != 1){
          process.exit(1);
        }
        var productId = data[0].id;
        callback(productId);
      }).on('fail', tools.failureHandler);
}

function doForUserName(username, callback) {
  rest.get(getUserByNameUrl + username, tools.getAuthObj())
    .on('success', function(data, response) {
      if(data.length != 1){
        process.exit(1);
      }
      var userId = data[0].id;
      callback(userId);
    }).on('fail', tools.failureHandler);
}

function doForThingName(thingName, productName, callback) {
  doForProductName(productName, function(productId) {
    rest.get(base + "?productId=" + productId + "&thingName=" + thingName, tools.getAuthObj())
      .on('success', function(data, response){
        if(data.length != 1){
          process.exit(1);
        }
        var thingId = data[0].thingId;
        callback(thingId, productId);
      })
      .on('fail', tools.failureHandler);
  });
}



program.parse(process.argv);
if (!program.args.length) {
  program.help();
}
