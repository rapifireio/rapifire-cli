#!/usr/bin/env node
// -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools');
var config = require('./config');

var base = config.baseApiUrl + "/things/";
var getProductByNameUrl = config.baseApiUrl + "/products/?name=";
var getUserByNameUrl = config.baseApiUrl + "/users/?username=";

program
  .command("create <name> <product>")
  .description("Create new thing")
  .action(function(name, product, opts) {
      console.log("Creating new thing named " + name + " for product " + product);

      tools.doForProductName(product, function(productId){
          rest.postJson(base, {productId: productId, name:  name}, tools.getAuthObj())
              .on('success', function(data, response) {
                  console.log("New thing created: ");
                  tools.printJson(data);
              })
              .on('fail', tools.failureHandler);
        })
  });


program
  .command("update <name> <newName> <newProductName> [userName]")
  .description("Update thing entry")
  .action(function(name, newName, newProductName, userName, opts){
    tools.doForThingName(name, function(thingId){
      tools.doForProductName(newProductName, function(productId){
        var updateJson = {
          name : newName,
          productId : productId
        }

        var updateThing = function(json){
          rest.putJson(base + thingId, json, tools.getAuthObj())
          .on('success', function(data, response){
            console.log("Thing updated.");
          })
          .on('fail', tools.failureHandler);
        }

        if(userName && userName.length > 0) {
          tools.doForUserName(userName, function(userId){
            updateJson.userId = userId;
            updateThing(updateJson);
          });
        } else {
          updateThing(updateJson);
        }
      });
    });
  });

program
  .command("assign <thingName> <username>")
  .description("Assign thing to user")
  .action(function(thingName, username, opts){
    tools.doForThingName(thingName, function(thingId){
      tools.doForUserName(username, function(userId){
        rest.postJson(base + thingId + '/assign/' + userId, {}, tools.getAuthObj())
          .on('success', function(data, response){
            console.log("Thing successfully assigned.")
          })  
          .on('fail', tools.failureHandler);
      });
    });
  });

program
  .command("delete <thingName>")
  .description("Delete single thing entry")
  .action(function(thingName, opts){
    tools.doForThingName(thingName, function(thingId){
      rest.del(base + thingId, tools.getAuthObj())
        .on('success', function(data, response){
          console.log("Thing " + thingName + " deleted.");
        })
        .on('fail', tools.failureHandler);
    })
  });

program
  .command("show <thingName>")
  .description("Show thing.")
  .action(function(thingName, opts){ 
    tools.doForThingName(thingName, function(thingId){
      rest.get(base + thingId, tools.getAuthObj())
        .on('success', function(data, response){
          tools.printJson(data);
        })
        .on('fail', tools.failureHandler);
    });
  });

program.parse(process.argv);
if (!program.args.length) {
  program.help();
}
