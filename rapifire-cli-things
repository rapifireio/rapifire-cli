#!/usr/bin/env node
 // -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools');
var config = require('./config');

program
  .command("create <name> <product>")
  .description("Create new thing")
  .action(function(name, product, opts) {
    console.log("Creating new thing named " + name + " for product " + product);

    tools.doForProductName(product, function(productId) {
      rest.postJson(tools.urlThings(), {
          productId: productId,
          name: name
        }, tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("New thing created: ");
          tools.printJson(data);
        })
        .on('fail', tools.failureHandler);
    })
  });


program
  .command("update <name> <newName> <newProductName> [userName]")
  .description("Update thing entry")
  .action(function(name, newName, newProductName, userName, opts) {
    tools.doForThingName(name, function(thingId) {
      tools.doForProductName(newProductName, function(productId) {
        var updateJson = {
          name: newName,
          productId: productId
        }

        var updateThing = function(json) {
          rest.putJson(tools.urlThing(thingId), json, tools.getAuthObj())
            .on('success', function(data, response) {
              console.log("Thing updated.");
            })
            .on('fail', tools.failureHandler);
        }

        if (userName && userName.length > 0) {
          tools.doForUserName(userName, function(userId) {
            updateJson.userId = userId;
            updateThing(updateJson);
          });
        } else {
          updateThing(updateJson);
        }
      });
    });
  });

program
  .command("assign <thingName> <username>")
  .description("Assign thing to user")
  .action(function(thingName, username, opts) {
    tools.doForThingName(thingName, function(thingId) {
      tools.doForUserName(username, function(userId) {
        rest.postJson(tools.urlThing(thingId) + '/assign/' + userId, {}, tools.getAuthObj())
          .on('success', function(data, response) {
            console.log("Thing successfully assigned.")
          })
          .on('fail', tools.failureHandler);
      });
    });
  });

program
  .command("delete <thingName>")
  .description("Delete single thing entry")
  .action(function(thingName, opts) {
    tools.doForThingName(thingName, function(thingId) {
      rest.del(tools.urlThib(thingId), tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("Thing " + thingName + " deleted.");
        })
        .on('fail', tools.failureHandler);
    })
  });

program
  .command("show <thingName>")
  .description("Show thing")
  .action(function(thingName, opts) {
    tools.doForThingName(thingName, function(thingId) {
      rest.get(tools.urlThing(thingId), tools.getAuthObj())
        .on('success', function(data, response) {
          tools.printJson(data);
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("meta <thingName>")
  .description("List metadata for thing")
  .action(function(thingName, opts) {

    tools.doForThingName(thingName, function(thingId) {
      rest.get(tools.urlThing(thingId) + '/meta', tools.getAuthObj())
        .on('success', function(data, response) {
          tools.printJsonArray(data);
        }).on('fail', tools.failureHandler);
    });

  });

program
  .command("meta-add <thingName> <key> <value>")
  .description("Create or update thing metadata entry")
  .action(function(thingName, key, value) {
    var metadataJson = {
      "key": key,
      "value": value
    };

    tools.doForThingName(thingName, function(thingId) {
      rest.putJson(tools.urlThing(thingId) + '/meta', metadataJson, tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("Metadata added successfully.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("meta-delete <thingName> <key>")
  .description("Delete single thing's metadata entry")
  .action(function(thingName, key, opts) {

    tools.doForThingName(thingName, function(thingId) {
      rest.del(tools.urlThing(thingId) + '/meta/' + encodeURIComponent(key), tools.getAuthObj())
        .on('success', function(data, response) {
          console.log('Key ' + key + ' deleted successfully for thing ' + thingName + '.');
        }).on('fail', tools.failureHandler);
    });
  });

program
  .command("list <query>")
  .description("List things, JSON format")
  .action(function(query, opts) {
    rest.get(tools.urlThings() + "?query=" + encodeURIComponent(query), tools.getAuthObj())
      .on('success', function(data, response) {
        tools.printJson(data);
        console.log("Total count: " + response.headers['x-total-count']);
      })
      .on('fail', tools.failureHandler);
  });

program
  .command("list-short <query>")
  .description("List things, short format")
  .action(function(query, opts) {
    rest.get(tools.urlThings() + "?query=" + encodeURIComponent(query), tools.getAuthObj())
      .on('success', function(data, response) {
        console.log("Thing Id, Thing Token, Thing Name, Product Name");
        for (var i = 0; i < data.length; i++) {
          console.log(data[i].thingId + ", " + data[i].thingToken + ", " + data[i].name + ", " + data[i].product.name);
        }
        console.log("Total count: " + response.headers['x-total-count']);
      })
      .on('fail', tools.failureHandler);
  });

program
  .command("clone <publicThingName> <productName> [thingName]")
  .description("Clone thing")
  .action(function(publicThingName, productName, thingName){
    tools.doForThingName(publicThingName, function(thingId){
      tools.doForProductName(productName, function(productId) {
        var thing = {
          productId: productId,
          name : thingName ? thingName : 'Clone of ' + publicThingName 
        }
        rest.postJson(tools.urlThing(thingId) + '/clone', thing, tools.getAuthObj())
          .on('success', function(data, response){
            console.log('Clone success.');
            tools.printJson(data);
          })
          .on('fail', tools.failureHandler);
      });
    });
  })


program.parse(process.argv);
if (!program.args.length) {
  program.help();
}
