#!/usr/bin/env node
 // -*- mode: javascript; -*-

"use strict";

var program = require('commander');
var rest = require('restler');
var tools = require('./tools');
var config = require('./config');


var base = config.baseApiUrl + "/users/";

program
  .command("list")
  .description("List all users")
  .action(function(opts) {
    rest.get(base, tools.getAuthObj())
      .on('success', function(data, response) {
        tools.printJsonArray(data);
      }).on('fail', tools.failureHandler);
  });

program
  .command("show <login>")
  .description("Returns single user.")
  .action(function(login, opts) {
    tools.doForUserName(login, function(userId) {
      rest.get(base + userId, tools.getAuthObj())
        .on('success', function(data, response) {
          tools.printJson(data);
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("create <login> <password> <name> [description]")
  .description("Create new user")
  .action(function(login, password, name, description, opts) {
    var description = description ? description : 'This user is created by rapifire-cli';
    var newUserData = {
      login: login,
      password: password,
      name: name,
      description: description
    }

    rest.postJson(base, newUserData, tools.getAuthObj())
      .on('success', function(data, response) {
        console.log("User " + name + " created.");
      }).on('fail', tools.failureHandler);
  });

program
  .command("update <login> <name> <description> [password]]")
  .description("Update user name, description and optionally password")
  .action(function(login, name, description, password, opts) {
    var updateJson = {
      "name": name,
      "description": description,
      "password": password
    }

    tools.doForUserName(login, function(userId) {
      rest.putJson(base + userId, updateJson, tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("User " + name + " updated.");
        })
        .on('fail', tools.failureHandler);
    })
  });

program
  .command("delete <login>")
  .description("Delete single user.")
  .action(function(login, opts) {
    tools.doForUserName(login, function(userId) {
      rest.del(base + userId, tools.getAuthObj())
        .on('success', function(data, response) {
          console.log("User " + login + " deleted.");
        })
        .on('fail', tools.failureHandler);
    });
  });

program
  .command("meta <login>")
  .description("List all metadata for user")
  .action(function(login, opts) {
    tools.doForUserName(login, function(userId) {
      rest.get(base + userId + '/meta', tools.getAuthObj())
        .on('success', function(data, response) {
          tools.printJsonArray(data);
        }).on('fail', tools.failureHandler);
    })

  });

program
  .command("meta-show <login> <key>")
  .description("Show single metadata entry")
  .action(function(login, key, opts) {
    tools.doForUserName(login, function(userId) {
      rest.get(base + userId + '/meta/' + encodeURIComponent(key), tools.getAuthObj())
        .on('success', function(data, response) {
          tools.printJson(data);
        }).on('fail', tools.failureHandler);
    })

  });

program
  .command("meta-add <login> <key> <value>")
  .description("Create or update user metadata entry")
  .action(function(login, key, value, opts) {
    var metadataJson = {
      "key": key,
      "value": value
    };

    tools.doForUserName(login, function(userId) {
      rest.putJson(base + userId + '/meta', metadataJson, tools.getAuthObj())
        .on('success', function(data, response) {
          console.log('Metadata added.');
        }).on('fail', tools.failureHandler);
    })

  });

program
  .command("meta-delete <login> <key>")
  .description("Delete user metadata entry")
  .action(function(login, key, opts) {
    tools.doForUserName(login, function(userId) {
      rest.del(base + userId + '/meta/' + encodeURIComponent(key), tools.getAuthObj())
        .on('success', function(data, response) {
          console.log('Metadata deleted.');
        }).on('fail', tools.failureHandler);
    })

  });

program.parse(process.argv);
if (!program.args.length) {
  program.help();
}